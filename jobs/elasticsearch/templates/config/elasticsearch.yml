# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please consult the documentation for further information on configuration options:
# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
#
# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
#cluster.name: my-application
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
#node.name: node-1
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
#path.data: /path/to/data
#
# Path to log files:
#
#path.logs: /path/to/logs
#
# ----------------------------------- Memory -----------------------------------
#
# Lock the memory on startup:
#
#bootstrap.memory_lock: true
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# ---------------------------------- Network -----------------------------------
#
# Set the bind address to a specific IP (IPv4 or IPv6):
#
#network.host: 192.168.0.1
#
# Set a custom port for HTTP:
#
#http.port: 9200
#
# For more information, consult the network module documentation.
#
# --------------------------------- Discovery ----------------------------------
#
# Pass an initial list of hosts to perform discovery when this node is started:
# The default list of hosts is ["127.0.0.1", "[::1]"]
#
#discovery.seed_hosts: ["host1", "host2"]
#
# Bootstrap the cluster using an initial set of master-eligible nodes:
#
#cluster.initial_master_nodes: ["node-1", "node-2"]
#
# For more information, consult the discovery and cluster formation module documentation.
#
# ---------------------------------- Gateway -----------------------------------
#
# Block initial recovery after a full cluster restart until N nodes are started:
#
#gateway.recover_after_nodes: 3
#
# For more information, consult the gateway module documentation.
#
# ---------------------------------- Various -----------------------------------
#
# Require explicit names when deleting indices:
#
#action.destructive_requires_name: true

bootstrap.memory_lock: true
network.host: 0.0.0.0
path.logs: /var/vcap/sys/log/elasticsearch
path.data: /var/vcap/store/elasticsearch
node.name: <%= name %>/<%= index %>
node.attr.zone: <%= spec.az %>
node.master: <%= p("elasticsearch.node.allow_master") %>
node.data: <%= p("elasticsearch.node.allow_data") %>
node.ingest: <%= p("elasticsearch.node.allow_ingest") %>

cluster.name: <%= spec.deployment %>

<%
  master_hosts = nil
  if_link("elasticsearch") { |elasticsearch_link| master_hosts = elasticsearch_link.instances.map {|e| e.address} }
  unless master_hosts
    master_hosts = p("elasticsearch.master_hosts")
  end
%>

<%
  minimum_master_nodes = p("elasticsearch.discovery.minimum_master_nodes")
  if minimum_master_nodes == "auto"
    masters = nil
    respond_to?(:if_link) && if_link('elasticsearch') do |elasticsearch|
      masters = link('elasticsearch').instances.length
    end.else do
      masters = p("elasticsearch.master_hosts").length
    end
    if masters % 2 == 0
      raise "Expected an odd number of masters; got #{masters}"
    end
    minimum_master_nodes = masters / 2 + 1
  end
%>
discovery.zen.minimum_master_nodes: <%= minimum_master_nodes %>
<%
  master_hosts = nil
  if_link("elasticsearch") { |elasticsearch_link| master_hosts = elasticsearch_link.instances.map {|e| e.address}.join(',') }
  unless master_hosts
    master_hosts = p("elasticsearch.master_hosts").join(',')
  end
%>
discovery.zen.ping.unicast.hosts: <%= master_hosts %>

<% if_p('elasticsearch.config_options') do |config_options| %>
<%= config_options.to_yaml.gsub(/---/, '') %>
<% end %>

## Security
xpack.security.enabled: <%= p('elasticsearch.security.enabled') %>

<% if p('elasticsearch.security.enabled') %>
## Inter-node communication certificates
xpack.security.transport.ssl.enabled: <%= p('elasticsearch.security.ssl.transport.enabled') %>
  <% if p('elasticsearch.security.ssl.transport.enabled') %>
xpack.security.transport.ssl.key: certs/transport/key.pem
xpack.security.transport.ssl.certificate: certs/transport/cert.pem
xpack.security.transport.ssl.certificate_authorities: certs/transport/ca.pem
xpack.security.transport.ssl.verification_mode: <%= p('elasticsearch.security.ssl.transport.verification_mode') %>
  <% end %>


## HTTP Certificate (from APPs to ELK)
xpack.security.http.ssl.enabled: <%= p('elasticsearch.security.ssl.http.enabled') %>
  <% if p('elasticsearch.security.ssl.http.enabled')  %>
xpack.security.http.ssl.key: certs/http/key.pem
xpack.security.http.ssl.certificate: certs/http/cert.pem
    <% if_p('elasticsearch.security.ssl.http.ca') do |ca| %>
      <% if not ca.empty? %>
xpack.security.http.ssl.certificate_authorities: certs/http/ca.pem
      <% end %>
    <% end %>
  <% end %>
<% end %>

<% if p('elasticsearch.smtp.enabled') %>
xpack.notification.email:
  default_account: <%= p('elasticsearch.smtp.default_account') %>
  account:
    <% p('elasticsearch.smtp.accounts').each do |account| %>
    <%= account.fetch('name') %>:
      profile: <%= account.fetch('profile') %>
      email_defaults:
        from: <%= account.fetch('user')%>
      smtp:
        auth: <%= account.fetch('auth')%>
        starttls.enable: <%= account.fetch('starttls.enable')%>
        host: <%= account.fetch('host')%>
        port: <%= account.fetch('port')%>
        user: <%= account.fetch('user')%>
    <% end %>
<% end %>
